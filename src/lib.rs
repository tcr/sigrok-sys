/* automatically generated by rust-bindgen */
/* then modified */

#![allow(non_camel_case_types, non_snake_case)]

extern crate glib_sys;

use glib_sys::{GSList, GHashTable, GString, GArray, GVariant};

pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::clone::Clone for Struct_itimerval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_timezone {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_clockinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_clockinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type clock_t = __darwin_clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_longlong;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed2;
pub type gboolean = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
// pub type GSList = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
// pub type GVariant = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
// pub type GArray = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
// pub type GHashTable = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
// pub type GString = Struct_Unnamed7;
pub type gssize = ::std::os::raw::c_ulong;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_sr_error_code {
    SR_OK = 0,
    SR_ERR = -1,
    SR_ERR_MALLOC = -2,
    SR_ERR_ARG = -3,
    SR_ERR_BUG = -4,
    SR_ERR_SAMPLERATE = -5,
    SR_ERR_NA = -6,
    SR_ERR_DEV_CLOSED = -7,
    SR_ERR_TIMEOUT = -8,
    SR_ERR_CHANNEL_GROUP = -9,
    SR_ERR_DATA = -10,
    SR_ERR_IO = -11,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_loglevel {
    SR_LOG_NONE = 0,
    SR_LOG_ERR = 1,
    SR_LOG_WARN = 2,
    SR_LOG_INFO = 3,
    SR_LOG_DBG = 4,
    SR_LOG_SPEW = 5,
}
pub type sr_receive_data_callback =
    ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int,
                                               revents: ::std::os::raw::c_int,
                                               cb_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_datatype {
    SR_T_UINT64 = 10000,
    SR_T_STRING = 10001,
    SR_T_BOOL = 10002,
    SR_T_FLOAT = 10003,
    SR_T_RATIONAL_PERIOD = 10004,
    SR_T_RATIONAL_VOLT = 10005,
    SR_T_KEYVALUE = 10006,
    SR_T_UINT64_RANGE = 10007,
    SR_T_DOUBLE_RANGE = 10008,
    SR_T_INT32 = 10009,
    SR_T_MQ = 10010,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_packettype {
    SR_DF_HEADER = 10000,
    SR_DF_END = 10001,
    SR_DF_META = 10002,
    SR_DF_TRIGGER = 10003,
    SR_DF_LOGIC = 10004,
    SR_DF_ANALOG_OLD = 10005,
    SR_DF_FRAME_BEGIN = 10006,
    SR_DF_FRAME_END = 10007,
    SR_DF_ANALOG = 10008,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_mq {
    SR_MQ_VOLTAGE = 10000,
    SR_MQ_CURRENT = 10001,
    SR_MQ_RESISTANCE = 10002,
    SR_MQ_CAPACITANCE = 10003,
    SR_MQ_TEMPERATURE = 10004,
    SR_MQ_FREQUENCY = 10005,
    SR_MQ_DUTY_CYCLE = 10006,
    SR_MQ_CONTINUITY = 10007,
    SR_MQ_PULSE_WIDTH = 10008,
    SR_MQ_CONDUCTANCE = 10009,
    SR_MQ_POWER = 10010,
    SR_MQ_GAIN = 10011,
    SR_MQ_SOUND_PRESSURE_LEVEL = 10012,
    SR_MQ_CARBON_MONOXIDE = 10013,
    SR_MQ_RELATIVE_HUMIDITY = 10014,
    SR_MQ_TIME = 10015,
    SR_MQ_WIND_SPEED = 10016,
    SR_MQ_PRESSURE = 10017,
    SR_MQ_PARALLEL_INDUCTANCE = 10018,
    SR_MQ_PARALLEL_CAPACITANCE = 10019,
    SR_MQ_PARALLEL_RESISTANCE = 10020,
    SR_MQ_SERIES_INDUCTANCE = 10021,
    SR_MQ_SERIES_CAPACITANCE = 10022,
    SR_MQ_SERIES_RESISTANCE = 10023,
    SR_MQ_DISSIPATION_FACTOR = 10024,
    SR_MQ_QUALITY_FACTOR = 10025,
    SR_MQ_PHASE_ANGLE = 10026,
    SR_MQ_DIFFERENCE = 10027,
    SR_MQ_COUNT = 10028,
    SR_MQ_POWER_FACTOR = 10029,
    SR_MQ_APPARENT_POWER = 10030,
    SR_MQ_MASS = 10031,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_unit {
    SR_UNIT_VOLT = 10000,
    SR_UNIT_AMPERE = 10001,
    SR_UNIT_OHM = 10002,
    SR_UNIT_FARAD = 10003,
    SR_UNIT_KELVIN = 10004,
    SR_UNIT_CELSIUS = 10005,
    SR_UNIT_FAHRENHEIT = 10006,
    SR_UNIT_HERTZ = 10007,
    SR_UNIT_PERCENTAGE = 10008,
    SR_UNIT_BOOLEAN = 10009,
    SR_UNIT_SECOND = 10010,
    SR_UNIT_SIEMENS = 10011,
    SR_UNIT_DECIBEL_MW = 10012,
    SR_UNIT_DECIBEL_VOLT = 10013,
    SR_UNIT_UNITLESS = 10014,
    SR_UNIT_DECIBEL_SPL = 10015,
    SR_UNIT_CONCENTRATION = 10016,
    SR_UNIT_REVOLUTIONS_PER_MINUTE = 10017,
    SR_UNIT_VOLT_AMPERE = 10018,
    SR_UNIT_WATT = 10019,
    SR_UNIT_WATT_HOUR = 10020,
    SR_UNIT_METER_SECOND = 10021,
    SR_UNIT_HECTOPASCAL = 10022,
    SR_UNIT_HUMIDITY_293K = 10023,
    SR_UNIT_DEGREE = 10024,
    SR_UNIT_HENRY = 10025,
    SR_UNIT_GRAM = 10026,
    SR_UNIT_CARAT = 10027,
    SR_UNIT_OUNCE = 10028,
    SR_UNIT_TROY_OUNCE = 10029,
    SR_UNIT_POUND = 10030,
    SR_UNIT_PENNYWEIGHT = 10031,
    SR_UNIT_GRAIN = 10032,
    SR_UNIT_TAEL = 10033,
    SR_UNIT_MOMME = 10034,
    SR_UNIT_TOLA = 10035,
    SR_UNIT_PIECE = 10036,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_mqflag {
    SR_MQFLAG_AC = 1,
    SR_MQFLAG_DC = 2,
    SR_MQFLAG_RMS = 4,
    SR_MQFLAG_DIODE = 8,
    SR_MQFLAG_HOLD = 16,
    SR_MQFLAG_MAX = 32,
    SR_MQFLAG_MIN = 64,
    SR_MQFLAG_AUTORANGE = 128,
    SR_MQFLAG_RELATIVE = 256,
    SR_MQFLAG_SPL_FREQ_WEIGHT_A = 512,
    SR_MQFLAG_SPL_FREQ_WEIGHT_C = 1024,
    SR_MQFLAG_SPL_FREQ_WEIGHT_Z = 2048,
    SR_MQFLAG_SPL_FREQ_WEIGHT_FLAT = 4096,
    SR_MQFLAG_SPL_TIME_WEIGHT_S = 8192,
    SR_MQFLAG_SPL_TIME_WEIGHT_F = 16384,
    SR_MQFLAG_SPL_LAT = 32768,
    SR_MQFLAG_SPL_PCT_OVER_ALARM = 65536,
    SR_MQFLAG_DURATION = 131072,
    SR_MQFLAG_AVG = 262144,
    SR_MQFLAG_REFERENCE = 524288,
    SR_MQFLAG_UNSTABLE = 1048576,
    SR_MQFLAG_FOUR_WIRE = 2097152,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_trigger_matches {
    SR_TRIGGER_ZERO = 1,
    SR_TRIGGER_ONE = 2,
    SR_TRIGGER_RISING = 3,
    SR_TRIGGER_FALLING = 4,
    SR_TRIGGER_EDGE = 5,
    SR_TRIGGER_OVER = 6,
    SR_TRIGGER_UNDER = 7,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_trigger {
    pub name: *mut ::std::os::raw::c_char,
    pub stages: *mut GSList,
}
impl ::std::clone::Clone for Struct_sr_trigger {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_trigger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_trigger_stage {
    pub stage: ::std::os::raw::c_int,
    pub matches: *mut GSList,
}
impl ::std::clone::Clone for Struct_sr_trigger_stage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_trigger_stage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_trigger_match {
    pub channel: *mut Struct_sr_channel,
    pub _match: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_sr_trigger_match {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_trigger_match {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sr_context { }
pub enum Struct_sr_session { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_rational {
    pub p: int64_t,
    pub q: uint64_t,
}
impl ::std::clone::Clone for Struct_sr_rational {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_rational {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_packet {
    pub _type: uint16_t,
    pub payload: *const ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sr_datafeed_packet {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_packet {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_header {
    pub feed_version: ::std::os::raw::c_int,
    pub starttime: Struct_timeval,
}
impl ::std::clone::Clone for Struct_sr_datafeed_header {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_meta {
    pub config: *mut GSList,
}
impl ::std::clone::Clone for Struct_sr_datafeed_meta {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_meta {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_logic {
    pub length: uint64_t,
    pub unitsize: uint16_t,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sr_datafeed_logic {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_logic {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_analog_old {
    pub channels: *mut GSList,
    pub num_samples: ::std::os::raw::c_int,
    pub mq: ::std::os::raw::c_int,
    pub unit: ::std::os::raw::c_int,
    pub mqflags: uint64_t,
    pub data: *mut ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_sr_datafeed_analog_old {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_analog_old {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_datafeed_analog {
    pub data: *mut ::std::os::raw::c_void,
    pub num_samples: uint32_t,
    pub encoding: *mut Struct_sr_analog_encoding,
    pub meaning: *mut Struct_sr_analog_meaning,
    pub spec: *mut Struct_sr_analog_spec,
}
impl ::std::clone::Clone for Struct_sr_datafeed_analog {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_datafeed_analog {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_analog_encoding {
    pub unitsize: uint8_t,
    pub is_signed: gboolean,
    pub is_float: gboolean,
    pub is_bigendian: gboolean,
    pub digits: uint8_t,
    pub is_digits_decimal: gboolean,
    pub scale: Struct_sr_rational,
    pub offset: Struct_sr_rational,
}
impl ::std::clone::Clone for Struct_sr_analog_encoding {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_analog_encoding {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_analog_meaning {
    pub mq: Enum_sr_mq,
    pub unit: Enum_sr_unit,
    pub mqflags: Enum_sr_mqflag,
    pub channels: *mut GSList,
}
impl ::std::clone::Clone for Struct_sr_analog_meaning {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_analog_meaning {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_analog_spec {
    pub spec_digits: uint8_t,
}
impl ::std::clone::Clone for Struct_sr_analog_spec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_analog_spec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_option {
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub def: *mut GVariant,
    pub values: *mut GSList,
}
impl ::std::clone::Clone for Struct_sr_option {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_option {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_resource_type { SR_RESOURCE_FIRMWARE = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_resource {
    pub size: uint64_t,
    pub handle: *mut ::std::os::raw::c_void,
    pub _type: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sr_resource {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_resource {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_output_flag { SR_OUTPUT_INTERNAL_IO_HANDLING = 1, }
pub enum Struct_sr_input { }
pub enum Struct_sr_input_module { }
pub enum Struct_sr_output { }
pub enum Struct_sr_output_module { }
pub enum Struct_sr_transform { }
pub enum Struct_sr_transform_module { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_channeltype {
    SR_CHANNEL_LOGIC = 10000,
    SR_CHANNEL_ANALOG = 10001,
}
pub enum Struct_sr_dev_inst { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_channel {
    pub sdi: *mut Struct_sr_dev_inst,
    pub index: ::std::os::raw::c_int,
    pub _type: ::std::os::raw::c_int,
    pub enabled: gboolean,
    pub name: *mut ::std::os::raw::c_char,
    pub _priv: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sr_channel {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_channel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_channel_group {
    pub name: *mut ::std::os::raw::c_char,
    pub channels: *mut GSList,
    pub _priv: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sr_channel_group {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_channel_group {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_config {
    pub key: uint32_t,
    pub data: *mut GVariant,
}
impl ::std::clone::Clone for Struct_sr_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_keytype {
    SR_KEY_CONFIG = 0,
    SR_KEY_MQ = 1,
    SR_KEY_MQFLAGS = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_key_info {
    pub key: uint32_t,
    pub datatype: ::std::os::raw::c_int,
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_sr_key_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_key_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_sr_configcap {
    SR_CONF_GET = -2147483648,
    SR_CONF_SET = 1073741824,
    SR_CONF_LIST = 536870912,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_configkey {
    SR_CONF_LOGIC_ANALYZER = 10000,
    SR_CONF_OSCILLOSCOPE = 10001,
    SR_CONF_MULTIMETER = 10002,
    SR_CONF_DEMO_DEV = 10003,
    SR_CONF_SOUNDLEVELMETER = 10004,
    SR_CONF_THERMOMETER = 10005,
    SR_CONF_HYGROMETER = 10006,
    SR_CONF_ENERGYMETER = 10007,
    SR_CONF_DEMODULATOR = 10008,
    SR_CONF_POWER_SUPPLY = 10009,
    SR_CONF_LCRMETER = 10010,
    SR_CONF_ELECTRONIC_LOAD = 10011,
    SR_CONF_SCALE = 10012,
    SR_CONF_CONN = 20000,
    SR_CONF_SERIALCOMM = 20001,
    SR_CONF_MODBUSADDR = 20002,
    SR_CONF_SAMPLERATE = 30000,
    SR_CONF_CAPTURE_RATIO = 30001,
    SR_CONF_PATTERN_MODE = 30002,
    SR_CONF_RLE = 30003,
    SR_CONF_TRIGGER_SLOPE = 30004,
    SR_CONF_AVERAGING = 30005,
    SR_CONF_AVG_SAMPLES = 30006,
    SR_CONF_TRIGGER_SOURCE = 30007,
    SR_CONF_HORIZ_TRIGGERPOS = 30008,
    SR_CONF_BUFFERSIZE = 30009,
    SR_CONF_TIMEBASE = 30010,
    SR_CONF_FILTER = 30011,
    SR_CONF_VDIV = 30012,
    SR_CONF_COUPLING = 30013,
    SR_CONF_TRIGGER_MATCH = 30014,
    SR_CONF_SAMPLE_INTERVAL = 30015,
    SR_CONF_NUM_HDIV = 30016,
    SR_CONF_NUM_VDIV = 30017,
    SR_CONF_SPL_WEIGHT_FREQ = 30018,
    SR_CONF_SPL_WEIGHT_TIME = 30019,
    SR_CONF_SPL_MEASUREMENT_RANGE = 30020,
    SR_CONF_HOLD_MAX = 30021,
    SR_CONF_HOLD_MIN = 30022,
    SR_CONF_VOLTAGE_THRESHOLD = 30023,
    SR_CONF_EXTERNAL_CLOCK = 30024,
    SR_CONF_SWAP = 30025,
    SR_CONF_CENTER_FREQUENCY = 30026,
    SR_CONF_NUM_LOGIC_CHANNELS = 30027,
    SR_CONF_NUM_ANALOG_CHANNELS = 30028,
    SR_CONF_VOLTAGE = 30029,
    SR_CONF_VOLTAGE_TARGET = 30030,
    SR_CONF_CURRENT = 30031,
    SR_CONF_CURRENT_LIMIT = 30032,
    SR_CONF_ENABLED = 30033,
    SR_CONF_CHANNEL_CONFIG = 30034,
    SR_CONF_OVER_VOLTAGE_PROTECTION_ENABLED = 30035,
    SR_CONF_OVER_VOLTAGE_PROTECTION_ACTIVE = 30036,
    SR_CONF_OVER_VOLTAGE_PROTECTION_THRESHOLD = 30037,
    SR_CONF_OVER_CURRENT_PROTECTION_ENABLED = 30038,
    SR_CONF_OVER_CURRENT_PROTECTION_ACTIVE = 30039,
    SR_CONF_OVER_CURRENT_PROTECTION_THRESHOLD = 30040,
    SR_CONF_CLOCK_EDGE = 30041,
    SR_CONF_AMPLITUDE = 30042,
    SR_CONF_REGULATION = 30043,
    SR_CONF_OVER_TEMPERATURE_PROTECTION = 30044,
    SR_CONF_OUTPUT_FREQUENCY = 30045,
    SR_CONF_OUTPUT_FREQUENCY_TARGET = 30046,
    SR_CONF_MEASURED_QUANTITY = 30047,
    SR_CONF_EQUIV_CIRCUIT_MODEL = 30048,
    SR_CONF_OVER_TEMPERATURE_PROTECTION_ACTIVE = 30049,
    SR_CONF_UNDER_VOLTAGE_CONDITION = 30050,
    SR_CONF_UNDER_VOLTAGE_CONDITION_ACTIVE = 30051,
    SR_CONF_SESSIONFILE = 40000,
    SR_CONF_CAPTUREFILE = 40001,
    SR_CONF_CAPTURE_UNITSIZE = 40002,
    SR_CONF_POWER_OFF = 40003,
    SR_CONF_DATA_SOURCE = 40004,
    SR_CONF_PROBE_FACTOR = 40005,
    SR_CONF_ADC_POWERLINE_CYCLES = 40006,
    SR_CONF_LIMIT_MSEC = 50000,
    SR_CONF_LIMIT_SAMPLES = 50001,
    SR_CONF_LIMIT_FRAMES = 50002,
    SR_CONF_CONTINUOUS = 50003,
    SR_CONF_DATALOG = 50004,
    SR_CONF_DEVICE_MODE = 50005,
    SR_CONF_TEST_MODE = 50006,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_dev_inst_type {
    SR_INST_USB = 10000,
    SR_INST_SERIAL = 10001,
    SR_INST_SCPI = 10002,
    SR_INST_USER = 10003,
    SR_INST_MODBUS = 10004,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_sr_dev_inst_status {
    SR_ST_NOT_FOUND = 10000,
    SR_ST_INITIALIZING = 10001,
    SR_ST_INACTIVE = 10002,
    SR_ST_ACTIVE = 10003,
    SR_ST_STOPPING = 10004,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_dev_driver {
    pub name: *const ::std::os::raw::c_char,
    pub longname: *const ::std::os::raw::c_char,
    pub api_version: ::std::os::raw::c_int,
    pub init: ::std::option::Option<unsafe extern "C" fn(driver:
                                                             *mut Struct_sr_dev_driver,
                                                         sr_ctx:
                                                             *mut Struct_sr_context)
                                        -> ::std::os::raw::c_int>,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(driver:
                                                                *const Struct_sr_dev_driver)
                                           -> ::std::os::raw::c_int>,
    pub scan: ::std::option::Option<unsafe extern "C" fn(driver:
                                                             *mut Struct_sr_dev_driver,
                                                         options: *mut GSList)
                                        -> *mut GSList>,
    pub dev_list: ::std::option::Option<unsafe extern "C" fn(driver:
                                                                 *const Struct_sr_dev_driver)
                                            -> *mut GSList>,
    pub dev_clear: ::std::option::Option<unsafe extern "C" fn(driver:
                                                                  *const Struct_sr_dev_driver)
                                             -> ::std::os::raw::c_int>,
    pub config_get: ::std::option::Option<unsafe extern "C" fn(key: uint32_t,
                                                               data:
                                                                   *mut *mut GVariant,
                                                               sdi:
                                                                   *const Struct_sr_dev_inst,
                                                               cg:
                                                                   *const Struct_sr_channel_group)
                                              -> ::std::os::raw::c_int>,
    pub config_set: ::std::option::Option<unsafe extern "C" fn(key: uint32_t,
                                                               data:
                                                                   *mut GVariant,
                                                               sdi:
                                                                   *const Struct_sr_dev_inst,
                                                               cg:
                                                                   *const Struct_sr_channel_group)
                                              -> ::std::os::raw::c_int>,
    pub config_channel_set: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                           *const Struct_sr_dev_inst,
                                                                       ch:
                                                                           *mut Struct_sr_channel,
                                                                       changes:
                                                                           ::std::os::raw::c_uint)
                                                      ->
                                                          ::std::os::raw::c_int>,
    pub config_commit: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                      *const Struct_sr_dev_inst)
                                                 -> ::std::os::raw::c_int>,
    pub config_list: ::std::option::Option<unsafe extern "C" fn(key: uint32_t,
                                                                data:
                                                                    *mut *mut GVariant,
                                                                sdi:
                                                                    *const Struct_sr_dev_inst,
                                                                cg:
                                                                    *const Struct_sr_channel_group)
                                               -> ::std::os::raw::c_int>,
    pub dev_open: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                 *mut Struct_sr_dev_inst)
                                            -> ::std::os::raw::c_int>,
    pub dev_close: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                  *mut Struct_sr_dev_inst)
                                             -> ::std::os::raw::c_int>,
    pub dev_acquisition_start: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                              *const Struct_sr_dev_inst)
                                                         ->
                                                             ::std::os::raw::c_int>,
    pub dev_acquisition_stop: ::std::option::Option<unsafe extern "C" fn(sdi:
                                                                             *mut Struct_sr_dev_inst)
                                                        ->
                                                            ::std::os::raw::c_int>,
    pub context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sr_dev_driver {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_dev_driver {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sr_serial_port {
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_sr_serial_port {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sr_serial_port {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sr_log_callback =
    ::std::option::Option<unsafe extern "C" fn(cb_data:
                                                   *mut ::std::os::raw::c_void,
                                               loglevel:
                                                   ::std::os::raw::c_int,
                                               format:
                                                   *const ::std::os::raw::c_char,
                                               args: va_list)
                              -> ::std::os::raw::c_int>;
pub type sr_session_stopped_callback =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void)>;
pub type sr_datafeed_callback =
    ::std::option::Option<unsafe extern "C" fn(sdi: *const Struct_sr_dev_inst,
                                               packet:
                                                   *const Struct_sr_datafeed_packet,
                                               cb_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type sr_resource_open_callback =
    ::std::option::Option<unsafe extern "C" fn(res: *mut Struct_sr_resource,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               cb_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type sr_resource_close_callback =
    ::std::option::Option<unsafe extern "C" fn(res: *mut Struct_sr_resource,
                                               cb_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type sr_resource_read_callback =
    ::std::option::Option<unsafe extern "C" fn(res: *const Struct_sr_resource,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               count: size_t,
                                               cb_data:
                                                   *mut ::std::os::raw::c_void)
                              -> gssize>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
    pub static mut tzname: *mut *mut ::std::os::raw::c_char;
    pub static mut getdate_err: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn fopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                      arg3: va_list) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn __sputc(_c: ::std::os::raw::c_int, _p: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn tempnam(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                   arg3: va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(arg1: *const ::std::os::raw::c_char, arg2: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                     arg3: *const ::std::os::raw::c_char, arg4: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn dprintf(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn getdelim(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn zopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char,
                 arg3: ::std::os::raw::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int, arg3: size_t,
                         arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __snprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                          arg3: ::std::os::raw::c_int, arg4: size_t,
                          arg5: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: size_t,
                          arg4: *const ::std::os::raw::c_char, arg5: va_list)
     -> ::std::os::raw::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                           arg3: ::std::os::raw::c_int, arg4: size_t,
                           arg5: *const ::std::os::raw::c_char, arg6: va_list)
     -> ::std::os::raw::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::std::os::raw::c_double;
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const Struct_tm) -> size_t;
    pub fn strptime(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: *mut Struct_tm)
     -> *mut ::std::os::raw::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *const Struct_tm,
                     arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn adjtime(arg1: *const Struct_timeval, arg2: *mut Struct_timeval)
     -> ::std::os::raw::c_int;
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const Struct_timeval)
     -> ::std::os::raw::c_int;
    pub fn lutimes(arg1: *const ::std::os::raw::c_char,
                   arg2: *const Struct_timeval) -> ::std::os::raw::c_int;
    pub fn settimeofday(arg1: *const Struct_timeval,
                        arg2: *const Struct_timezone)
     -> ::std::os::raw::c_int;
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut Struct_itimerval)
     -> ::std::os::raw::c_int;
    pub fn gettimeofday(arg1: *mut Struct_timeval,
                        arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn select(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                  arg3: *mut fd_set, arg4: *mut fd_set,
                  arg5: *mut Struct_timeval) -> ::std::os::raw::c_int;
    pub fn setitimer(arg1: ::std::os::raw::c_int,
                     arg2: *const Struct_itimerval,
                     arg3: *mut Struct_itimerval) -> ::std::os::raw::c_int;
    pub fn utimes(arg1: *const ::std::os::raw::c_char,
                  arg2: *const Struct_timeval) -> ::std::os::raw::c_int;
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn sr_analog_to_float(analog: *const Struct_sr_datafeed_analog,
                              buf: *mut ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn sr_analog_unit_to_string(analog: *const Struct_sr_datafeed_analog,
                                    result: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sr_rational_set(r: *mut Struct_sr_rational, p: int64_t,
                           q: uint64_t);
    pub fn sr_init(ctx: *mut *mut Struct_sr_context) -> ::std::os::raw::c_int;
    pub fn sr_exit(ctx: *mut Struct_sr_context) -> ::std::os::raw::c_int;
    pub fn sr_log_loglevel_set(loglevel: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sr_log_loglevel_get() -> ::std::os::raw::c_int;
    pub fn sr_log_callback_set(cb: sr_log_callback,
                               cb_data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sr_log_callback_set_default() -> ::std::os::raw::c_int;
    pub fn sr_dev_channel_name_set(channel: *mut Struct_sr_channel,
                                   name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sr_dev_channel_enable(channel: *mut Struct_sr_channel,
                                 state: gboolean) -> ::std::os::raw::c_int;
    pub fn sr_dev_has_option(sdi: *const Struct_sr_dev_inst,
                             key: ::std::os::raw::c_int) -> gboolean;
    pub fn sr_dev_config_capabilities_list(sdi: *const Struct_sr_dev_inst,
                                           cg: *const Struct_sr_channel_group,
                                           key: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sr_dev_options(driver: *const Struct_sr_dev_driver,
                          sdi: *const Struct_sr_dev_inst,
                          cg: *const Struct_sr_channel_group) -> *mut GArray;
    pub fn sr_dev_list(driver: *const Struct_sr_dev_driver) -> *mut GSList;
    pub fn sr_dev_clear(driver: *const Struct_sr_dev_driver)
     -> ::std::os::raw::c_int;
    pub fn sr_dev_open(sdi: *mut Struct_sr_dev_inst) -> ::std::os::raw::c_int;
    pub fn sr_dev_close(sdi: *mut Struct_sr_dev_inst)
     -> ::std::os::raw::c_int;
    pub fn sr_dev_inst_driver_get(sdi: *const Struct_sr_dev_inst)
     -> *mut Struct_sr_dev_driver;
    pub fn sr_dev_inst_vendor_get(sdi: *const Struct_sr_dev_inst)
     -> *const ::std::os::raw::c_char;
    pub fn sr_dev_inst_model_get(sdi: *const Struct_sr_dev_inst)
     -> *const ::std::os::raw::c_char;
    pub fn sr_dev_inst_version_get(sdi: *const Struct_sr_dev_inst)
     -> *const ::std::os::raw::c_char;
    pub fn sr_dev_inst_sernum_get(sdi: *const Struct_sr_dev_inst)
     -> *const ::std::os::raw::c_char;
    pub fn sr_dev_inst_connid_get(sdi: *const Struct_sr_dev_inst)
     -> *const ::std::os::raw::c_char;
    pub fn sr_dev_inst_channels_get(sdi: *const Struct_sr_dev_inst)
     -> *mut GSList;
    pub fn sr_dev_inst_channel_groups_get(sdi: *const Struct_sr_dev_inst)
     -> *mut GSList;
    pub fn sr_dev_inst_user_new(vendor: *const ::std::os::raw::c_char,
                                model: *const ::std::os::raw::c_char,
                                version: *const ::std::os::raw::c_char)
     -> *mut Struct_sr_dev_inst;
    pub fn sr_dev_inst_channel_add(sdi: *mut Struct_sr_dev_inst,
                                   index: ::std::os::raw::c_int,
                                   _type: ::std::os::raw::c_int,
                                   name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sr_driver_list(ctx: *const Struct_sr_context)
     -> *mut *mut Struct_sr_dev_driver;
    pub fn sr_driver_init(ctx: *mut Struct_sr_context,
                          driver: *mut Struct_sr_dev_driver)
     -> ::std::os::raw::c_int;
    pub fn sr_driver_scan_options_list(driver: *const Struct_sr_dev_driver)
     -> *mut GArray;
    pub fn sr_driver_scan(driver: *mut Struct_sr_dev_driver,
                          options: *mut GSList) -> *mut GSList;
    pub fn sr_config_get(driver: *const Struct_sr_dev_driver,
                         sdi: *const Struct_sr_dev_inst,
                         cg: *const Struct_sr_channel_group, key: uint32_t,
                         data: *mut *mut GVariant) -> ::std::os::raw::c_int;
    pub fn sr_config_set(sdi: *const Struct_sr_dev_inst,
                         cg: *const Struct_sr_channel_group, key: uint32_t,
                         data: *mut GVariant) -> ::std::os::raw::c_int;
    pub fn sr_config_commit(sdi: *const Struct_sr_dev_inst)
     -> ::std::os::raw::c_int;
    pub fn sr_config_list(driver: *const Struct_sr_dev_driver,
                          sdi: *const Struct_sr_dev_inst,
                          cg: *const Struct_sr_channel_group, key: uint32_t,
                          data: *mut *mut GVariant) -> ::std::os::raw::c_int;
    pub fn sr_key_info_get(keytype: ::std::os::raw::c_int, key: uint32_t)
     -> *const Struct_sr_key_info;
    pub fn sr_key_info_name_get(keytype: ::std::os::raw::c_int,
                                keyid: *const ::std::os::raw::c_char)
     -> *const Struct_sr_key_info;
    pub fn sr_session_trigger_get(session: *mut Struct_sr_session)
     -> *mut Struct_sr_trigger;
    pub fn sr_session_load(ctx: *mut Struct_sr_context,
                           filename: *const ::std::os::raw::c_char,
                           session: *mut *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_new(ctx: *mut Struct_sr_context,
                          session: *mut *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_destroy(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_dev_remove_all(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_dev_add(session: *mut Struct_sr_session,
                              sdi: *mut Struct_sr_dev_inst)
     -> ::std::os::raw::c_int;
    pub fn sr_session_dev_remove(session: *mut Struct_sr_session,
                                 sdi: *mut Struct_sr_dev_inst)
     -> ::std::os::raw::c_int;
    pub fn sr_session_dev_list(session: *mut Struct_sr_session,
                               devlist: *mut *mut GSList)
     -> ::std::os::raw::c_int;
    pub fn sr_session_trigger_set(session: *mut Struct_sr_session,
                                  trig: *mut Struct_sr_trigger)
     -> ::std::os::raw::c_int;
    pub fn sr_session_datafeed_callback_remove_all(session:
                                                       *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_datafeed_callback_add(session: *mut Struct_sr_session,
                                            cb: sr_datafeed_callback,
                                            cb_data:
                                                *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sr_session_start(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_run(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_stop(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_is_running(session: *mut Struct_sr_session)
     -> ::std::os::raw::c_int;
    pub fn sr_session_stopped_callback_set(session: *mut Struct_sr_session,
                                           cb: sr_session_stopped_callback,
                                           cb_data:
                                               *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sr_input_list() -> *mut *const Struct_sr_input_module;
    pub fn sr_input_id_get(imod: *const Struct_sr_input_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_input_name_get(imod: *const Struct_sr_input_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_input_description_get(imod: *const Struct_sr_input_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_input_extensions_get(imod: *const Struct_sr_input_module)
     -> *const *const ::std::os::raw::c_char;
    pub fn sr_input_find(id: *mut ::std::os::raw::c_char)
     -> *const Struct_sr_input_module;
    pub fn sr_input_options_get(imod: *const Struct_sr_input_module)
     -> *mut *const Struct_sr_option;
    pub fn sr_output_test_flag(omod: *const Struct_sr_output_module,
                               flag: uint64_t) -> gboolean;
    pub fn sr_input_options_free(options: *mut *const Struct_sr_option);
    pub fn sr_input_new(imod: *const Struct_sr_input_module,
                        options: *mut GHashTable) -> *mut Struct_sr_input;
    pub fn sr_input_scan_buffer(buf: *mut GString,
                                _in: *mut *const Struct_sr_input)
     -> ::std::os::raw::c_int;
    pub fn sr_input_scan_file(filename: *const ::std::os::raw::c_char,
                              _in: *mut *const Struct_sr_input)
     -> ::std::os::raw::c_int;
    pub fn sr_input_dev_inst_get(_in: *const Struct_sr_input)
     -> *mut Struct_sr_dev_inst;
    pub fn sr_input_send(_in: *const Struct_sr_input, buf: *mut GString)
     -> ::std::os::raw::c_int;
    pub fn sr_input_end(_in: *const Struct_sr_input) -> ::std::os::raw::c_int;
    pub fn sr_input_free(_in: *const Struct_sr_input);
    pub fn sr_output_list() -> *mut *const Struct_sr_output_module;
    pub fn sr_output_id_get(omod: *const Struct_sr_output_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_output_name_get(omod: *const Struct_sr_output_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_output_description_get(omod: *const Struct_sr_output_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_output_extensions_get(omod: *const Struct_sr_output_module)
     -> *const *const ::std::os::raw::c_char;
    pub fn sr_output_find(id: *mut ::std::os::raw::c_char)
     -> *const Struct_sr_output_module;
    pub fn sr_output_options_get(omod: *const Struct_sr_output_module)
     -> *mut *const Struct_sr_option;
    pub fn sr_output_options_free(opts: *mut *const Struct_sr_option);
    pub fn sr_output_new(omod: *const Struct_sr_output_module,
                         params: *mut GHashTable,
                         sdi: *const Struct_sr_dev_inst,
                         filename: *const ::std::os::raw::c_char)
     -> *const Struct_sr_output;
    pub fn sr_output_send(o: *const Struct_sr_output,
                          packet: *const Struct_sr_datafeed_packet,
                          out: *mut *mut GString) -> ::std::os::raw::c_int;
    pub fn sr_output_free(o: *const Struct_sr_output)
     -> ::std::os::raw::c_int;
    pub fn sr_transform_list() -> *mut *const Struct_sr_transform_module;
    pub fn sr_transform_id_get(tmod: *const Struct_sr_transform_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_transform_name_get(tmod: *const Struct_sr_transform_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_transform_description_get(tmod:
                                            *const Struct_sr_transform_module)
     -> *const ::std::os::raw::c_char;
    pub fn sr_transform_find(id: *const ::std::os::raw::c_char)
     -> *const Struct_sr_transform_module;
    pub fn sr_transform_options_get(tmod: *const Struct_sr_transform_module)
     -> *mut *const Struct_sr_option;
    pub fn sr_transform_options_free(opts: *mut *const Struct_sr_option);
    pub fn sr_transform_new(tmod: *const Struct_sr_transform_module,
                            params: *mut GHashTable,
                            sdi: *const Struct_sr_dev_inst)
     -> *const Struct_sr_transform;
    pub fn sr_transform_free(t: *const Struct_sr_transform)
     -> ::std::os::raw::c_int;
    pub fn sr_trigger_new(name: *const ::std::os::raw::c_char)
     -> *mut Struct_sr_trigger;
    pub fn sr_trigger_free(trig: *mut Struct_sr_trigger);
    pub fn sr_trigger_stage_add(trig: *mut Struct_sr_trigger)
     -> *mut Struct_sr_trigger_stage;
    pub fn sr_trigger_match_add(stage: *mut Struct_sr_trigger_stage,
                                ch: *mut Struct_sr_channel,
                                trigger_match: ::std::os::raw::c_int,
                                value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn sr_serial_list(driver: *const Struct_sr_dev_driver) -> *mut GSList;
    pub fn sr_serial_free(serial: *mut Struct_sr_serial_port);
    pub fn sr_resource_set_hooks(ctx: *mut Struct_sr_context,
                                 open_cb: sr_resource_open_callback,
                                 close_cb: sr_resource_close_callback,
                                 read_cb: sr_resource_read_callback,
                                 cb_data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sr_si_string_u64(x: uint64_t, unit: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn sr_samplerate_string(samplerate: uint64_t)
     -> *mut ::std::os::raw::c_char;
    pub fn sr_period_string(frequency: uint64_t)
     -> *mut ::std::os::raw::c_char;
    pub fn sr_voltage_string(v_p: uint64_t, v_q: uint64_t)
     -> *mut ::std::os::raw::c_char;
    pub fn sr_parse_sizestring(sizestring: *const ::std::os::raw::c_char,
                               size: *mut uint64_t) -> ::std::os::raw::c_int;
    pub fn sr_parse_timestring(timestring: *const ::std::os::raw::c_char)
     -> uint64_t;
    pub fn sr_parse_boolstring(boolstring: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn sr_parse_period(periodstr: *const ::std::os::raw::c_char,
                           p: *mut uint64_t, q: *mut uint64_t)
     -> ::std::os::raw::c_int;
    pub fn sr_parse_voltage(voltstr: *const ::std::os::raw::c_char,
                            p: *mut uint64_t, q: *mut uint64_t)
     -> ::std::os::raw::c_int;
    pub fn sr_package_version_major_get() -> ::std::os::raw::c_int;
    pub fn sr_package_version_minor_get() -> ::std::os::raw::c_int;
    pub fn sr_package_version_micro_get() -> ::std::os::raw::c_int;
    pub fn sr_package_version_string_get() -> *const ::std::os::raw::c_char;
    pub fn sr_lib_version_current_get() -> ::std::os::raw::c_int;
    pub fn sr_lib_version_revision_get() -> ::std::os::raw::c_int;
    pub fn sr_lib_version_age_get() -> ::std::os::raw::c_int;
    pub fn sr_lib_version_string_get() -> *const ::std::os::raw::c_char;
    pub fn sr_strerror(error_code: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn sr_strerror_name(error_code: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
